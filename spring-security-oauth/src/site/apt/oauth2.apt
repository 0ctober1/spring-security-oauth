  ---
  User Guide
  ---
  Ryan Heaton
  ---

Introduction

  This is the user guide for the support for OAuth 2.0. For OAuth 1.0, everything is different, so {{{./oauth1.html}see it's user guide}}.

  This user guide is divided into two parts, the first for the OAuth 2.0 provider, the second for the OAuth 2.0 client. Here's a TOC for quick navigation:

  *{{{#OAuth_2.0_Provider}OAuth 2.0 Provider}}

    *{{{#Managing_Clients}Managing Clients}}

    *{{{#Managing_Tokens}Managing Tokens}}

    *{{{#OAuth_2.0_Provider_Request_Filters}OAuth 2.0 Provider Request Filters}}

    *{{{#Provider_Configuration}Configuration}}

    *{{{#Configuring_Client_Details}Configuring Client Details}}

  *{{{#OAuth_2.0_Client}OAuth 2.0 Client}}

    *{{{#Managing_Protected_Resources}Managing Protected Resources}}

    *{{{#Managing_Tokens}Managing Tokens}}

    *{{{#Client_Configuration}Client Configuration}}

    *{{{#Protected_Resource_Configuration}Protected Resource Configuration}}

    *{{{#Accessing_Protected_Resources}Accessing Protected Resources}}

{OAuth 2.0 Provider}

  The OAuth 2.0 provider mechanism is responsible for exposing OAuth 2.0 protected resources. The configuration involves establishing
  the OAuth 2.0 clients that can access its protected resources on behalf of a user. The provider does this by managing and verifying
  the OAuth 2.0 tokens that can be used to access the protected resources. Where applicable, the provider must also supply an interface 
  for the user to confirm that a client can be granted access to the protected resources (i.e. a confirmation page).

*{Managing Clients}

  The entry point into your database of clients is defined by the <<<{{{./apidocs/org/springframework/security/oauth2/provider/ClientDetailsService.html}ClientDetailsService}}>>>.
  You must define your own <<<ClientDetailsService>>> that will load <<<{{{./apidocs/org/springframework/security/oauth2/provider/ClientDetails.html}ClientDetails}}>>>
  by the <client id>.  Note the existence of an {{{./apidocs/org/springframework/security/oauth2/provider/InMemoryClientDetailsService.html}in-memory implementation}} of <<<ClientDetailsService>>>.

  When implementing your <<<ClientDetailsService>>> consider returning instances of (or extending) {{{./apidocs/org/springframework/security/oauth2/provider/BaseClientDetails.html}BaseClientDetails}}.

*{Managing Tokens}

  The <<<{{{./apidocs/org/springframework/security/oauth2/provider/token/OAuth2ProviderTokenServices.html}OAuth2ProviderTokenServices}}>>> interface defines
  the operations that are necessary to manage OAuth 2.0 tokens. Note the following:

  *When an access token is created, the authentication must be stored so that the subsequent access token can reference it.

  *The access token is used to load the authentication that was used to authorize its creation.

  []

  When creating your <<<OAuth2ProviderTokenServices>>> implementation, you may want to consider extending
  the <<<{{{./apidocs/org/springframework/security/oauth2/provider/token/RandomValueOAuth2ProviderTokenServices.html}RandomValueOAuth2ProviderTokenServices}}>>> which creates
  tokens via random value and handles everything except for the persistence of the tokens.  There is also an <<<{{{./apidocs/org/springframework/security/oauth2/provider/token/InMemoryOAuth2ProviderTokenServices.html}in-memory implementation}}>>>
  of the <<<OAuth2ProviderTokenServices>>> that may be suitable.

*{OAuth 2.0 Provider Request Filters}

  The requests for the tokens and for access to protected resources are handled by standard Spring Security request filters. The following filters
  are required in the Spring Security filter chain in order to implement OAuth 2.0:

  *The <<<{{{./apidocs/org/springframework/security/oauth2/provider/OAuth2AuthorizationFilter.html}OAuth2AuthorizationFilter}}>>> is used
  to service the request for an access token. Default URL: <<</oauth/authorizen>>>.

  *The <<<{{{./apidocs/org/springframework/security/oauth2/provider/OAuth2ExceptionHandlerFilter.html}OAuth2ExceptionHandlerFilter}}>>> is used
  to handle any errors.

  *The <<<{{{./apidocs/org/springframework/security/oauth2/provider/OAuth2ProtectedResourceFilter.html}OAuth2ProtectedResourceFilter}}>>> is used
  to load the Authentication for the request given an authenticated access token.

  Other filters are applied according to the different OAuth 2.0 flows.

*{Provider Configuration}

  For the OAuth 2.0 provider, configuration is simplified using the custom spring configuration elements. The schema for these elements rests at
  {{http://www.springframework.org/schema/security/spring-security-oauth2.xsd}}. The namespace is <<<http://www.springframework.org/schema/security/oauth2>>>.

  As you configure the provider, you have to consider two different pieces to the OAuth 2 authorization mechanism. The first is
  the way that the client is to obtain authorization to obtain an access token from the end-user (e.g. verification code). The
  second is the mechanism by which the access token is granted (e.g. verification token, user credentials, refresh token). The configuration
  of the provider is used to provide implementations of the consumer details service and token services and to enable or disable certain
  aspects of the mechanism globally. Note, however, that each client can be configured specifically with permissions to be able to use certain
  authorization mechanisms and access grants. I.e. just because your provider is configured to support the "password" grant type, doesn't mean
  that a specific client is authorized to use that grant type.

  The <<<provider>>> element is used to configure the OAuth 2.0 provider mechanism. The following attributes can be applied to the <<<provider>>> element:

  *<<client-details-service-ref>>: The reference to the bean that defines the client details service.

  *<<token-services-ref>>: The reference to the bean that defines the token services.

  *<<authorization-url>>: The URL at which a request for an authorization token will be serviced.

  []

  An important aspect of the provider configuration is the way that a verification token is supplied to an OAuth client. A verification token
  is obtained by the OAuth client by directing the end-user to an authorization page where the user can enter her credentials, resulting in a redirection
  from the provider authorization server back to the OAuth client with the verification token. Examples of this are elaborated in the OAuth 2 specification
  (see the User Agent profile and the Web Server profile).

  The verification code mechanism is configured via the <<verification-code>> child element of the <<provider>> element. The <<verification-code>> element
  supports the following attributes:

  *<<disabled>>: Boolean value specifying whether the verification code mechanism is disabled. This effectively disables the User Agent and Web Server OAuth profiles.

  *<<services-ref>>: The reference to the bean that defines the verification code services (instance of {{org.springframework.security.oauth2.provider.verification.VerificationCodeServices}})

  *<<user-approval-page>>: The URL of the page that handles the user approval form.

  *<<approval-parameter-name>>: The name of the form parameter that is used to indicate user approval of the client authentication request.

  []

*{Configuring Client Details}

  The <<<client-details-service>>> element is used to define an in-memory implementation of the client details service.  It takes an <<id>> attribute and an
  arbitrary number of <<<client>>> child elements that define the following attributes for each client:

  *<<clientId>> (required): The client id.

  *<<secret>> (required): The client secret, if any.

  *<<scope>>: The scope to which the client is limited (comma-separated). If scope is undefined or empty (the default) the client is not limited by scope.

  *<<authorizedFlows>>: Flows that are authorized for the client to use (comma-separated). Default value is "web_server".

  *<<authorities>>: Authorities that are granted to the client (comma-separated).

{OAuth 2.0 Client}

  The OAuth 2.0 client mechanism is responsible for access the OAuth 2.0 protected resources of other servers. The configuration involves establishing
  the relevant protected resources to which users might have access. The client also needs to be supplied with mechanisms for storing verification
  codes and access tokens for users.

*{Managing Protected Resources}

  The entry point into your database of protected resources is defined by the <<<{{{./apidocs/org/springframework/security/oauth2/consumer/OAuth2ProtectedResourceDetailsService.html}OAuth2ProtectedResourceDetailsService}}>>>.
  You must define your own <<<OAuth2ProtectedResourceDetailsService>>> that will load <<<{{{./apidocs/org/springframework/security/oauth2/consumer/OAuth2ProtectedResourceDetails.html}OAuth2ProtectedResourceDetails}}>>>
  by id.  Note the existence of an {{{./apidocs/org/springframework/security/oauth2/consumer/InMemoryOAuth2ProtectedResourceDetailsService.html}in-memory implementation}} of <<<OAuth2ProtectedResourceDetailsService>>>,
  which might be adequate for your needs. See {{{#Configuring_Resource_Details}Configuring Resource Details}} for more information.

*{Managing Tokens}

  The <<<{{{./apidocs/org/springframework/security/oauth2/consumer/token/OAuth2ClientTokenServices.html}OAuth2ClientTokenServices}}>>> interface defines
  the operations that are necessary to manage OAuth 2.0 tokens for specific users. There is an in-memory implementation provided, but it's like you'll need
  to implement your own service for storing the access tokens and associated authentication instances in a persistent database.

*{Client Configuration}

  For the OAuth 2.0 client, configuration is simplified using the custom spring configuration elements. The schema for these elements rests at
  {{http://www.springframework.org/schema/security/spring-security-oauth2.xsd}}. The namespace is <<<http://www.springframework.org/schema/security/oauth2>>>.

  The <<<client>>> element is used to configure the OAuth 2.0 client mechanism. The following attributes can be applied to the <<<client>>> element:

  *<<token-services-ref>>: The reference to the bean that stores tokens on behalf of a user. Default value is an instance of InMemoryOAuth2ConsumerTokenServices.

  *<<resource-details-service-ref>>: The reference to the bean that services the known resource details.

*{Protected Resource Configuration}

  Protected resources can be defined using the <<<resource>>> configuration element. Each <<<resource>>> element is effectively a definition of a bean that is
  an instance of <<<{{{./apidocs/org/springframework/security/oauth2/consumer/OAuth2ProtectedResourceDetails.html}OAuth2ProtectedResourceDetails}}>>>. The
  <<<resource>>> element supports the following attributes:

  *<<id>>: The id of the resource. The id is only used by the client to lookup the resource; it's never used in the OAuth protocol. It's also used as the id of the bean.

  *<<type>>: The type (i.e. "grant type") of the resource. This is used to specify how an access token is to be obtained for this resource. Valid values include "authorization_code", "password", and "assertion". Default value is "authorization_code".

  *<<clientId>>: The OAuth client id. This is the id by with the OAuth provider is to identify your client.

  *<<accessTokenUri>>: The URI of the provider OAuth endpoint that provides the access token.

  *<<scope>>: Comma-separted list of string specifying the scope of the access to the resource. By default, no scope will be specified.

  *<<clientSecret>>: The secret associated with the resource. By default, no secret will be supplied for access to the resource.

  *<<clientAuthenticationScheme>>: The scheme used by your client to authenticate to the access token endpoint. Suggested values: "http_basic" and "form". Default: "http_basic". See section 2.1 of the OAuth 2 spec.

  *<<userAuthorizationUri>>: The uri to which the user will be redirected if the user is ever needed to authorize access to the resource. Note that this is not always required, depending on which OAuth 2 profiles are supported.

*{Accessing Protected Resources}

  Once you've supplied all the configuration for the resources, you can now access those resources. The suggested method for accessing those resources is
  by using {{{http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/client/RestTemplate.html}the new RestTemplate introduced
  in Spring 3}}. OAuth for Spring Security has provided {{{./apidocs/org/springframework/security/oauth2/consumer/OAuth2RestTemplate.html}an extension 
  of RestTemplate}} that only needs to be supplied an instance of <<<{{{./apidocs/org/springframework/security/oauth2/consumer/OAuth2ProtectedResourceDetails.html}OAuth2ProtectedResourceDetails}}>>>.